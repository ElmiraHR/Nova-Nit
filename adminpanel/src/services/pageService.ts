import axios from 'axios';

// ‚úÖ –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é API_URL –∏–∑ .env –∏–ª–∏ –ª–æ–∫–∞–ª—å–Ω—ã–π —Å–µ—Ä–≤–µ—Ä –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
export const API_URL = process.env.REACT_APP_API_URL || 'http://localhost:8080';

export interface PageData {
  title_en?: string;
  title_me?: string;
  text_en?: string;
  text_me?: string;
  image_path?: string;
  mission_image_path?: string;
  how_work_image_path?: string;

  // ‚úÖ Hero Banner
  hero_title_en?: string;
  hero_title_me?: string;
  hero_text_en?: string;
  hero_text_me?: string;
  hero_image_path?: string;

  // ‚úÖ Body Info
  body_title_en?: string;
  body_title_me?: string;
  body_title_link?: string;

  body_info_en?: string;
  body_info_me?: string;
  section1_en?: string;
  section1_me?: string;
  section2_en?: string;
  section2_me?: string;
  section3_en?: string;
  section3_me?: string;

  // ‚úÖ Partners
  partners_title_en?: string;
  partners_title_me?: string;
  partners_info_en?: string;
  partners_info_me?: string;
  partners_image_path?: string;
  partners_logos?: string[]; // ‚úÖ –¥–æ–±–∞–≤–ª—è–µ–º –º–∞—Å—Å–∏–≤ –ª–æ–≥–æ—Ç–∏–ø–æ–≤
}

// ‚úÖ –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã –ø–æ slug
export const fetchPage = async (slug: string): Promise<PageData> => {
  const response = await axios.get<PageData>(`${API_URL}/api/pages/${slug}`);
  const data = response.data;

  // ‚úÖ –î–æ–±–∞–≤–ª—è–µ–º –±–∞–∑–æ–≤—ã–π URL –¥–ª—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π, –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
  if (data.hero_image_path && !/^https?:\/\//.test(data.hero_image_path)) {
    data.hero_image_path = `${API_URL}${data.hero_image_path}`;
  }
  if (data.how_work_image_path && !/^https?:\/\//.test(data.how_work_image_path)) {
    data.how_work_image_path = `${API_URL}${data.how_work_image_path}`;
  }

  return data;
};

// ‚úÖ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
export const updatePage = async (slug: string, data: PageData, imageFile?: File): Promise<PageData> => {
  const formData = new FormData();

  // ‚úÖ Hero Banner
  formData.append('hero_title_en', data.hero_title_en || '');
  formData.append('hero_title_me', data.hero_title_me || '');
  formData.append('hero_text_en', data.hero_text_en || '');
  formData.append('hero_text_me', data.hero_text_me || '');

  // ‚úÖ Body Info
  formData.append('body_title_en', data.body_title_en || '');
  formData.append('body_title_me', data.body_title_me || '');

  formData.append('body_title_link', data.body_title_link || '');

  
  formData.append('body_info_en', data.body_info_en || '');
  formData.append('body_info_me', data.body_info_me || '');
  formData.append('section1_en', data.section1_en || '');
  formData.append('section1_me', data.section1_me || '');
  formData.append('section2_en', data.section2_en || '');
  formData.append('section2_me', data.section2_me || '');
  formData.append('section3_en', data.section3_en || '');
  formData.append('section3_me', data.section3_me || '');

  // ‚úÖ Partners
  formData.append('partners_title_en', data.partners_title_en || '');
  formData.append('partners_title_me', data.partners_title_me || '');
  formData.append('partners_info_en', data.partners_info_en || '');
  formData.append('partners_info_me', data.partners_info_me || '');

  // ‚úÖ –ó–∞–≥—Ä—É–∂–∞–µ–º —Ñ–∞–π–ª, –µ—Å–ª–∏ –æ–Ω –µ—Å—Ç—å
  if (imageFile) {
    formData.append('image', imageFile);
  }

  try {
    const response = await axios.post<PageData>(`${API_URL}/api/pages/${slug}`, formData, {
      headers: {
        'Content-Type': 'multipart/form-data',
      },
    });
    return response.data;
  } catch (error) {
    console.error('Error updating page data', error);
    throw error;
  }
};

// ‚úÖ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ Mission
export const updateMission = async (slug: string, formData: FormData): Promise<PageData> => {
  try {
    console.log("–û—Ç–ø—Ä–∞–≤–ª—è–µ–º formData:", formData);
    const response = await axios.post<PageData>(`${API_URL}/api/mission/${slug}`, formData, {
      headers: {
        'Content-Type': 'multipart/form-data',
      },
    });
    console.log("–û—Ç–≤–µ—Ç —Å–µ—Ä–≤–µ—Ä–∞:", response.data);
    return response.data;
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –º–∏—Å—Å–∏–∏:', error);
    throw error;
  }
};

// ‚úÖ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ How Does Work (—Ñ–∏–∫—Å –ø—É—Ç–∏)
export const updateHowDoesWork = async (formData: FormData): Promise<PageData> => {
  try {
    console.log("‚úÖ –û—Ç–ø—Ä–∞–≤–ª—è–µ–º formData:", formData);

    // üõ†Ô∏è –£–±–µ–¥–∏—Å—å, —á—Ç–æ –ø—É—Ç—å API —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç —Ä–µ–∞–ª—å–Ω–æ–º—É –º–∞—Ä—à—Ä—É—Ç—É –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ
    const response = await axios.post<PageData>(`${API_URL}/api/howdoeswork`, formData, {
      headers: {
        'Content-Type': 'multipart/form-data',
      },
    });

    console.log("‚úÖ –û—Ç–≤–µ—Ç —Å–µ—Ä–≤–µ—Ä–∞:", response.data);
    return response.data;
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ How Does Work:', error);
    throw error;
  }
};

// ‚úÖ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ Partners
export const updatePartners = async (
  slug: string,
  data: PageData,
  imageFile?: File,
  logoFiles?: File[]
): Promise<PageData> => {
  const formData = new FormData();

  // ‚úÖ –û—Å–Ω–æ–≤–Ω—ã–µ —Ç–µ–∫—Å—Ç–æ–≤—ã–µ –ø–æ–ª—è
  formData.append('partners_title_en', data.partners_title_en || '');
  formData.append('partners_title_me', data.partners_title_me || '');
  formData.append('partners_info_en', data.partners_info_en || '');
  formData.append('partners_info_me', data.partners_info_me || '');

  // ‚úÖ –°–æ—Ö—Ä–∞–Ω—è–µ–º —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –ª–æ–≥–æ, –æ—Å—Ç–∞–≤—à–∏–µ—Å—è –ø–æ—Å–ª–µ —É–¥–∞–ª–µ–Ω–∏—è
  if (data.partners_logos) {
    formData.append('partners_logos', JSON.stringify(data.partners_logos));
  }

  // ‚úÖ –ì–ª–∞–≤–Ω–∞—è –∫–∞—Ä—Ç–∏–Ω–∫–∞
  if (imageFile) {
    formData.append('image', imageFile);
  }

  // ‚úÖ –ù–æ–≤—ã–µ –ª–æ–≥–æ—Ç–∏–ø—ã (–µ—Å–ª–∏ –µ—Å—Ç—å)
  if (logoFiles) {
    logoFiles.forEach((file) => {
      formData.append('logos[]', file);
    });
  }

  try {
    const response = await axios.post<PageData>(`${API_URL}/api/pages/partners/${slug}`, formData, {
      headers: {
        'Content-Type': 'multipart/form-data',
      },
    });
    return response.data;
  } catch (error) {
    console.error('Error updating partners data', error);
    throw error;
  }
};
